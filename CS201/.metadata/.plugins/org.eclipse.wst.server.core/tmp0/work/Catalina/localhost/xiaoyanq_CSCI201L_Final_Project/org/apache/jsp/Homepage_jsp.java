/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.24
 * Generated at: 2019-11-30 22:00:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Homepage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("\t<head>\n");
      out.write("\t\t<meta charset=\"ISO-8859-1\">\n");
      out.write("\t\t<title>Homepage</title>\n");
      out.write("\t\t<meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\">\n");
      out.write("    \t<meta charset=\"utf-8\">\n");
      out.write("\n");
      out.write("    \t<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\">\n");
      out.write("\n");
      out.write("    \t<script src=\"https://code.jquery.com/jquery-3.1.1.min.js\" crossorigin=\"anonymous\"></script>\n");
      out.write("    \t<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\">\n");
      out.write("\t\t\n");
      out.write("\t\t<style>\n");
      out.write("\t      #header{\n");
      out.write("\t      background-image: url(images/background1.jpg);\n");
      out.write("\t      font-family: \"Lato\";\n");
      out.write("\t      height: 900px;\n");
      out.write("\t      background-size: cover;\n");
      out.write("\t      background-position: center;  \n");
      out.write("\t      color: #FFF;    \n");
      out.write("\t      }\n");
      out.write("\t\n");
      out.write("\t      #left-button{\n");
      out.write("\t        float: right;\n");
      out.write("\t        line-height: 40px;\n");
      out.write("\t        font-size: 20px;\n");
      out.write("\t        margin-right: 50px;\n");
      out.write("\t      }\n");
      out.write("\t\n");
      out.write("\t      #right-button{\n");
      out.write("\t        float: right;\n");
      out.write("\t        line-height: 40px;\n");
      out.write("\t        font-size: 20px;\n");
      out.write("\t        margin-right: 5%;\n");
      out.write("\t      }\n");
      out.write("\t\n");
      out.write("\t      .clear-float{\n");
      out.write("\t        clear: both;\n");
      out.write("\t      }\n");
      out.write("\t    \n");
      out.write("\t      h1 {\n");
      out.write("\t        font-weight: 700;\n");
      out.write("\t        font-size: 5em;\n");
      out.write("\t      }\n");
      out.write("\t\n");
      out.write("\t      h3{\n");
      out.write("\t        font-size: 1.5em;\n");
      out.write("\t      }\n");
      out.write("\t\n");
      out.write("\t      #text{\n");
      out.write("\t        height: 45px;\n");
      out.write("\t        line-height: 45px;\n");
      out.write("\t      }\n");
      out.write("\t\n");
      out.write("\t      .content{\n");
      out.write("\t        padding-top: 20%;\n");
      out.write("\t        text-align: center;\n");
      out.write("\t        text-shadow: 0px 4px 3px rgba(0,0,0,0.4),\n");
      out.write("\t                     0px 8px 13px rgba(0,0,0,0.1),\n");
      out.write("\t                     0px 18px 23px rgba(0,0,0,0.1);\n");
      out.write("\t      }\n");
      out.write("\t\n");
      out.write("\t      #for-header{\n");
      out.write("\t          width: 400px;\n");
      out.write("\t          border-top: 1px solid #f8f8f8;\n");
      out.write("\t          border-bottom: 1px solid rgba(0,0,0,0.2);\n");
      out.write("\t      }\n");
      out.write("\t      /* Optional: Makes the sample page fill the window. */\n");
      out.write("\t      html, body {\n");
      out.write("\t        height: 100%;\n");
      out.write("\t        margin: 0;\n");
      out.write("\t        padding: 0;\n");
      out.write("\t      }\n");
      out.write("\t \n");
      out.write("\t      #search-bar {\n");
      out.write("\t        background-color: #fff;\n");
      out.write("\t        font-family: Roboto;\n");
      out.write("\t        font-size: 15px;\n");
      out.write("\t        font-weight: 300;\n");
      out.write("\t        padding: 0 11px 0 13px;\n");
      out.write("\t        text-overflow: ellipsis;\n");
      out.write("\t        width: 620px;\n");
      out.write("\t        height: 45px;\n");
      out.write("\t      }\n");
      out.write("\t\n");
      out.write("\t      #footer\n");
      out.write("\t      {\n");
      out.write("\t        text-align: center;\n");
      out.write("\t        background-color: #EFEDEF;\n");
      out.write("\t        color: #7A797A;\n");
      out.write("\t        height: 35px;\n");
      out.write("\t      }\n");
      out.write("\t\n");
      out.write("\t      #footer p{\n");
      out.write("\t        line-height: 35px;\n");
      out.write("\t        margin: 0px;\n");
      out.write("\t      }\n");
      out.write("\t\n");
      out.write("\t      .search{\n");
      out.write("\t        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\n");
      out.write("\t      }\n");
      out.write("\t     \n");
      out.write("\t      #choice{\n");
      out.write("\t        font-size: 20px;\n");
      out.write("\t        margin-top: 20px;\n");
      out.write("\t      }\n");
      out.write("\t\n");
      out.write("\t      .radio-class{\n");
      out.write("\t        height: 35px;\n");
      out.write("\t        font-weight: 2.5em;\n");
      out.write("\t      }\n");
      out.write("\t\n");
      out.write("\t      #top-bar{\n");
      out.write("\t        background-color: #EFEDEF;\n");
      out.write("\t        color: #7A797A;\n");
      out.write("\t        height: 40px;\n");
      out.write("\t        opacity: 0.7;\n");
      out.write("\t        z-index: 1;\n");
      out.write("\t        position: fixed;\n");
      out.write("\t        top: 0;\n");
      out.write("\t        width: 100%;\n");
      out.write("\t      }\n");
      out.write("\t\n");
      out.write("\t      #top-bar a{\n");
      out.write("\t        display: block;\n");
      out.write("\t        text-decoration: none;\n");
      out.write("\t        color: #EA70A7;\n");
      out.write("\t      }\n");
      out.write("\t\n");
      out.write("\t      #top-bar a:hover {\n");
      out.write("\t        color: #7A797A;\n");
      out.write("\t      }\t\t\n");
      out.write("\t\t</style>\n");
      out.write("\t</head>\n");
      out.write("\t<body>\n");
      out.write("\t\n");
      out.write("\t\t<div id=\"header\">\n");
      out.write("\t\t\t<div id=\"top-bar\">\n");
      out.write("\t");

		String n = (String)session.getAttribute("username");
		System.out.println("in homepage, session username:"+n);
		if(n!=null){ //someone logged in
	
      out.write("\n");
      out.write("\t\t\t<!-- <a href=\"LogoutServlet\"><div id=\"right-button\"> Sign out </div></a>\n");
      out.write("\t\t\t<a href=\"Upload.jsp\"><div id=\"left-button\"> Upload GPA </div></a> -->\n");
      out.write("\t\t\t<a href=\"LogoutServlet\"><div id=\"right-button\"> Sign out </div></a>\n");
      out.write("\t\t\t<a href=\"Upload.jsp\"><div id=\"left-button\"> Upload GPA </div></a>\n");
      out.write("\t");

		}else{
	
      out.write("\t\t\n");
      out.write("\t\t\t<a href=\"RegisterPage.jsp\"><div id=\"right-button\"> Register </div></a>\n");
      out.write("\t\t\t<a href=\"LoginPage.jsp\"><div id=\"left-button\"> Login </div></a> \n");
      out.write("\t");

		}
	
      out.write("\n");
      out.write("\t<!-- \t\t<a href=\"RegisterPage.jsp\"><div id=\"right-button\"> Register </div></a>\n");
      out.write("\t\t\t<a href=\"LoginPage.jsp\"><div id=\"left-button\"> Login </div></a> -->\n");
      out.write("\t\t\n");
      out.write("\t\t\t\t<div class=\"clear-float\"></div>\n");
      out.write("\t\t\t</div> <!-- top-bar -->\n");
      out.write("\t\n");
      out.write("\t\t    <div class=\"container\">\n");
      out.write("\t          <div class=\"row\">\n");
      out.write("\t            <div class=\"col-lg-12\">\n");
      out.write("\t              <div class=\"content\">\n");
      out.write("\t                <h1>SeCure that A!</h1>\n");
      out.write("\t                <h3><div id=\"text\"></div></h3>\n");
      out.write("\t                <hr id=\"for-header\">\n");
      out.write("\t\n");
      out.write("\t                <div id=\"search\">\n");
      out.write("\t                  <form name=\"myform\" action=\"SearchServlet\">\n");
      out.write("\t                    <div class=\"ui icon input\">\n");
      out.write("\t                      <input id=\"search-bar\" class=\"controls\" name=\"search-bar\" type=\"text\" placeholder=\" Search..\">\n");
      out.write("\t                      <i class=\"search icon\"></i>\n");
      out.write("\t                    </div>\n");
      out.write("\t                    \n");
      out.write("\t                    <div id=\"choice\" class=\"container\">\n");
      out.write("\t                      <div class=\"row\">\n");
      out.write("\t                        <div class=\"col-lg-3\"></div>\n");
      out.write("\t                        \n");
      out.write("\t                        <div class=\"col-lg-2 radio-class\">\n");
      out.write("\t                          <input type=\"radio\" name=\"radio-button\" value=\"Professor\"> Professor \n");
      out.write("\t                        </div>\n");
      out.write("\t                        \n");
      out.write("\t                        <div class=\"col-lg-2\"></div>\n");
      out.write("\t                        \n");
      out.write("\t                        <div class=\"col-lg-2 radio-class\">\n");
      out.write("\t                          <input type=\"radio\" name=\"radio-button\" value=\"Course\"> Course\n");
      out.write("\t                        </div>\n");
      out.write("\t                        \n");
      out.write("\t                        <div class=\"col-lg-3\"></div>\n");
      out.write("\t                      </div>\n");
      out.write("\t                    </div>\n");
      out.write("\t\n");
      out.write("\t                    <div class=\"clear-float\"></div>\n");
      out.write("\t                  </form>\n");
      out.write("\t                </div>\n");
      out.write("\t                \n");
      out.write("\t                <div id=\"error_msg\">\n");
      out.write("\t\t\t    \t");
      out.print( request.getAttribute("error") != null ? request.getAttribute("error"):"" );
      out.write("\n");
      out.write("\t\t\t    \t</div>\n");
      out.write("\t           \n");
      out.write("\t              </div>\n");
      out.write("\t            </div>\n");
      out.write("\t          </div>\n");
      out.write("\t        </div> <!-- container -->\n");
      out.write("\t\t\n");
      out.write("\t\t</div> <!-- header -->\n");
      out.write("\t\t\n");
      out.write("\t\t<div id=\"footer\"> <p> Yang Qiao | Kate Hu | Blair Niu | Jessie Zhang | Mage Zhang | Irene Li &copy; 2019 </p> </div>\n");
      out.write("\t\t\n");
      out.write("\t\t<script>\n");
      out.write("\t\t    // List of sentences\n");
      out.write("\t\t    var _CONTENT = [ \"Find what you're looking for\", \"The Best Darn Grade You Can Get\", \"\"];\n");
      out.write("\t\t\n");
      out.write("\t\t    // Current sentence being processed\n");
      out.write("\t\t    var _PART = 0;\n");
      out.write("\t\t\n");
      out.write("\t\t    // Character number of the current sentence being processed \n");
      out.write("\t\t    var _PART_INDEX = 0;\n");
      out.write("\t\t\n");
      out.write("\t\t    // Holds the handle returned from setInterval\n");
      out.write("\t\t    var _INTERVAL_VAL;\n");
      out.write("\t\t\n");
      out.write("\t\t    // Element that holds the text\n");
      out.write("\t\t    var _ELEMENT = document.querySelector(\"#text\");\n");
      out.write("\t\t\n");
      out.write("\t\t    // Implements typing effect\n");
      out.write("\t\t    function Type() { \n");
      out.write("\t\t      var text =  _CONTENT[_PART].substring(0, _PART_INDEX + 1);\n");
      out.write("\t\t      _ELEMENT.innerHTML = text;\n");
      out.write("\t\t      _PART_INDEX++;\n");
      out.write("\t\t\n");
      out.write("\t\t      // If full sentence has been displayed then start to delete the sentence after some time\n");
      out.write("\t\t      if(text === _CONTENT[_PART]) {\n");
      out.write("\t\t        clearInterval(_INTERVAL_VAL);\n");
      out.write("\t\t        setTimeout(function() {\n");
      out.write("\t\t          _INTERVAL_VAL = setInterval(Delete, 50);\n");
      out.write("\t\t        }, 1000);\n");
      out.write("\t\t      }\n");
      out.write("\t\t    }\n");
      out.write("\t\n");
      out.write("\t\t    // Implements deleting effect\n");
      out.write("\t\t    function Delete() {\n");
      out.write("\t\t      var text =  _CONTENT[_PART].substring(0, _PART_INDEX - 1);\n");
      out.write("\t\t      _ELEMENT.innerHTML = text;\n");
      out.write("\t\t      _PART_INDEX--;\n");
      out.write("\t\t\n");
      out.write("\t\t      // If sentence has been deleted then start to display the next sentence\n");
      out.write("\t\t      if(text === '') {\n");
      out.write("\t\t        clearInterval(_INTERVAL_VAL);\n");
      out.write("\t\t\n");
      out.write("\t\t        // If last sentence then display the first one, else move to the next\n");
      out.write("\t\t        if(_PART == (_CONTENT.length - 1))\n");
      out.write("\t\t          _PART = 0;\n");
      out.write("\t\t        else\n");
      out.write("\t\t          _PART++;\n");
      out.write("\t\t        _PART_INDEX = 0;\n");
      out.write("\t\t\n");
      out.write("\t\t        // Start to display the next sentence after some time\n");
      out.write("\t\t        setTimeout(function() {\n");
      out.write("\t\t          _INTERVAL_VAL = setInterval(Type, 100);\n");
      out.write("\t\t        }, 200);\n");
      out.write("\t\t      }\n");
      out.write("\t\t    }\n");
      out.write("\t\t\n");
      out.write("\t\t    // Start the typing effect on load\n");
      out.write("\t\t    _INTERVAL_VAL = setInterval(Type, 100);\n");
      out.write("\t\t</script>\n");
      out.write("\t</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
